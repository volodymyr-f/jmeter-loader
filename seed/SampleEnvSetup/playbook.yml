---
- hosts: all
  vars:
    agent_version: 2.2.1
  remote_user: vagrant
  become: yes
  become_method: sudo
  tasks:
      - name: install general packages
        yum: name=wget,mc,net-tools,tmux,telnet,vim,libselinux-python,python-pip,git,unzip,java-1.8.0-openjdk-devel state=present
      - name: install server agent
        script: "/vagrant/bootstrap/install_server_agent.sh {{agent_version}}"
        args:
            creates: /opt/server-agent
      - name: copy init scripts to manage agent server
        template: src={{ item.src }} dest={{ item.dest }} mode=751
        with_items:
            - { src: '/vagrant/bootstrap/agent', dest: '/etc/init.d/agent' }
      - name: start server agent
        systemd: name=agent enabled=yes state=started daemon_reload=yes
- hosts: kafka
  vars:
    kafka_home: /opt/kafka
    kafka_replication_factor: 1
    kafka_partitions_number: 1
    kafka_version: 2.11-0.10.2.1
    kafka_port: 9092
    zookeeper_port: 2181
  remote_user: vagrant
  become: yes
  become_method: sudo
  tasks:
      - name: install kafka
        script: "/vagrant/bootstrap/kafka/install_kafka.sh {{kafka_version}} {{kafka_domain}} {{kafka_port}}"
        args:
            creates: /opt/kafka
      - name: copy init scripts to manage kafka and zookeeper servers
        copy: src={{ item.src }} dest={{ item.dest }} mode=751
        with_items:
            - { src: '/vagrant/bootstrap/kafka/kafka', dest: '/etc/init.d/kafka' }
            - { src: '/vagrant/bootstrap/kafka/zookeeper', dest: '/etc/init.d/zookeeper' }
      - name: start zookeeper
        systemd: name=zookeeper enabled=yes state=started daemon_reload=yes
      - name: start kafka
        systemd: name=kafka enabled=yes state=started daemon_reload=yes
      - name: create topic
        shell: "{{ kafka_home }}/bin/kafka-topics.sh --create --zookeeper {{ kafka_domain }}:{{ zookeeper_port }} --replication-factor {{ kafka_replication_factor }} --partitions {{ kafka_partitions_number }} --topic {{ kafka_topic }} &"  
- hosts: cassandra
  vars:
      cassandra_version: 30
      cassandra_port: 9042
  remote_user: vagrant
  become: yes
  become_method: sudo
  tasks:
      - name: copy datastax repo and cassandra scripts
        template: src={{ item.src }} dest={{ item.dest }} mode=751
        with_items:
            - { src: '/vagrant/bootstrap/cassandra/datastax.repo', dest: '/etc/yum.repos.d/datastax.repo' }
            - { src: '/vagrant/bootstrap/cassandra/create_keyspace_and_table.j2', dest: '/opt/create_keyspace_and_table.cql' }
      - name: install cassandra
        yum: name="dsc{{cassandra_version}}" state=present
      - name: configure cassandra
        script: "/vagrant/bootstrap/cassandra/configure_cassandra.sh {{ cassandra_domain }}"
      - name: start cassandra
        systemd: name=cassandra enabled=yes state=started daemon_reload=yes
      - name: wait for cassandra server
        local_action: wait_for host={{ cassandra_domain }} state=started port={{ cassandra_port }} delay=20 timeout=40 connect_timeout=10
      - name: create keyspace and table
        shell: "cqlsh {{cassandra_domain }} {{ cassandra_port }} -f /opt/create_keyspace_and_table.cql"
- hosts: spark
  vars:
    spark_version: spark-2.1.0-bin-hadoop2.7
    zookeeper_version: cloudera-cdh-4-0.x86_64
    zookeeper_rpm_repo: http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/
    mesos_version: mesosphere-el-repo-7-3
    mesos_rpm_repo: http://repos.mesosphere.com/el/7/noarch/RPMS/
    mesos_cluster_port: 7077
    mesos_cluster_socket: mesos://{{ spark_domain }}:{{ mesos_cluster_port }}
    mesos_client_port: 5050
    mesos_client_socket: "'mesos:\\/\\/{{ spark_domain }}:{{ mesos_client_port }}'"
    sbt_version: sbt-0.13.5
    sbt_rpm_repo: http://dl.bintray.com/sbt/rpm/
  remote_user: vagrant
  become: yes
  become_method: sudo
  tasks:
      - name: install sbt
        yum: name="{{sbt_rpm_repo}}{{sbt_version}}.rpm" state=present
      - name: install spark
        script: "/vagrant/bootstrap/spark/install_spark.sh {{spark_version}}"
        args:
            creates: /opt/spark
      - name: install zookeeper and mesos rpms
        yum: name="{{ zookeeper_rpm_repo }}{{ zookeeper_version }}.rpm,{{mesos_rpm_repo}}{{mesos_version}}.noarch.rpm" state=present
      - name: install zookeeper and mesos servers
        yum: name=zookeeper,zookeeper-server,mesos state=present
      - name: init zookeeper
        shell: "sudo -u zookeeper zookeeper-server-initialize --myid=1 --force"
      - name: install spark consumer
        script: "/vagrant/bootstrap/spark/install_spark_consumer.sh {{ cassandra_domain }} {{ cassandra_keyspace }} {{ cassandra_table }} {{ kafka_domain }} {{ kafka_topic }} {{ mesos_client_socket }}"
        args:
            creates: /opt/spark-structured-streaming-loader
      - name: copy init.d script to manage spark consumer
        template: src={{ item.src }} dest={{ item.dest }} mode=751
        with_items:
            - { src: '/vagrant/bootstrap/spark/consumer', dest: '/etc/init.d/consumer' }
      - name: start zookeeper server
        systemd: name=zookeeper-server enabled=yes state=started daemon_reload=yes
      - name: start mesos master
        systemd: name=mesos-master enabled=yes state=started daemon_reload=yes
      - name: start mesos slave
        systemd: name=mesos-slave enabled=yes state=started daemon_reload=yes
      - name: start spark consumer
        systemd: name=consumer enabled=yes state=started daemon_reload=yes